#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd3 for the result
exec 1>&2 # redirect all output to stderr for logging

# for assets
PATH=$PATH:/opt/resource

# for jq
PATH=/usr/local/bin/:$PATH
TMPDIR=${TMPDIR:-/tmp}

destination=${1}

payload=$(mktemp $TMPDIR/jira-api-resource-request.XXXXXX)

cat > $payload <&0

# Reading source configuration
url=$(jq -r '.source.url // ""' < ${payload})
username=$(jq -r '.source.username // ""' < ${payload})
password=$(jq -r '.source.password // ""' < ${payload})
context=$(jq -r '.source.context // ""' < ${payload})
customFieldName=$(jq -r '.source.custom_field_name // ""' < ${payload})
customFieldType=$(jq -r '.source.custom_field_type // ""' < ${payload})
loggingLevel=$(jq -r '.source.logging_level // ""' < ${payload})
forceOnParent=$(jq -r '.source.force_on_parent // ""' < ${payload})

# Reading params configuration
issuesFileDirectory=$(jq -r '.params.file_location // ""' < ${payload})
customFieldValue=$(jq -r '.params.custom_field_value // ""' < ${payload})
customFieldValueFromFile=$(jq -r '.params.custom_field_value_from_file // ""' < ${payload})

issues=$(<$1/${issuesFileDirectory}/*.txt)

flags=""

if [[ ! -z $forceOnParent ]]; then
    if [[ "$forceOnParent" == 'y' ]] && [[ "$forceOnParent" == 'Y' ]]; then
        flags="$flags --forceOnParent"
    fi
fi

pushd /tmp/build/put

jiraApiResource \
    --url="$url" \
    --username="$username" \
    --password="$password" \
    --context="$context" \
    --issues="$issues" \
    --customFieldName="$customFieldName" \
    --customFieldType="$customFieldType" \
    --customFieldValue="$customFieldValue" \
    --customFieldValueFromFile="$" \
    --loggingLevel="$loggingLevel" \
    $flags

popd