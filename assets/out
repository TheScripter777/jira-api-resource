#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd3 for the result
exec 1>&2 # redirect all output to stderr for logging

# for assets
PATH=$PATH:/opt/resource

# for jq
PATH=/usr/local/bin/:$PATH
TMPDIR=${TMPDIR:-/tmp}

destination=${1}

payload=$(mktemp $TMPDIR/jira-api-issue-resource-request.XXXXXX)

cat > $payload <&0

# Reading source configuration
url=$(jq -r '.source.url // ""' < ${payload})
username=$(jq -r '.source.username // ""' < ${payload})
password=$(jq -r '.source.password // ""' < ${payload})
context=$(jq -r '.source.context // ""' < ${payload})
customFieldName=$(jq -r '.source.custom_field_name // ""' < ${payload})
customFieldType=$(jq -r '.source.custom_field_type // ""' < ${payload})
loggingLevel=$(jq -r '.source.logging_level // ""' < ${payload})
flags=$(jq -r '.source.flags // ""' < ${payload})

# Reading params configuration
issuesList=$(jq -r '.params.issues // ""' < ${payload})
issuesFileDirectory=$(jq -r '.params.issue_file_location // ""' < ${payload})
customFieldValue=$(jq -r '.params.custom_field_value // ""' < ${payload})
customFieldValueFromFile=$(jq -r '.params.custom_field_value_from_file // ""' < ${payload})
commentBody=$(jq -r '.params.comment_body // ""' < ${payload})
destination=$(jq -e '.params.destination // ""' < ${payload})

if [ ! -z "$issuesList" ]; then
  issues=$issuesList
elif [ ! -z "$issuesFileDirectory" ]; then
  issues=$(<$1/${issuesFileDirectory}/*.txt)
else
  issues=""
fi

pushd /tmp/build/put

    echo "Executing jiraApiIssueResource (out) for $issues"
    jiraApiIssueResource \
        --url="$url" \
        --username="$username" \
        --password="$password" \
        --context="$context" \
        --issues="$issues" \
        --customFieldName="$customFieldName" \
        --customFieldType="$customFieldType" \
        --customFieldValue="$customFieldValue" \
        --customFieldValueFromFile="$customFieldValueFromFile" \
        --commentBody="$commentBody" \
        --loggingLevel="$loggingLevel" \
        --destination="$destination" \
        $flags

    # Print json
    jq -n "{\"version\": {\"ref\": \"$issues\"}, \"metadata\": [{\"name\": \"issues(s)\", \"value\": \"$issues\"},{\"name\": \"context\", \"value\": \"$context\"}]}" >&3

popd

exit 0